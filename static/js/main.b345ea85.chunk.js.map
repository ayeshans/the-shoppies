{"version":3,"sources":["components/SearchPanel.js","components/ResultsPanel.js","components/Nominations.js","components/Dashboard.js","App.js","registerServiceWorker.js","index.js"],"names":["SearchPanel","props","className","Input","startAdornment","InputAdornment","position","placeholder","type","value","title","onChange","e","target","ResultsPanel","options","optionsLength","onNominate","bind","this","hasStarted","search","tooManySelected","year","map","obj","idx","Title","Year","films","some","film","disabled","onClick","submitted","length","Nominations","finishOption","onUndoNominate","onFinalSubmit","onSubmit","Dashboard","searchHandleChange","setState","getSearchResults","state","axios","get","then","response","setOptions","data","catch","console","log","hasOwnProperty","currData","sort","a","b","parseFloat","key","handleNomination","concat","handleUndoNominate","filter","handleSubmit","preventDefault","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b345ea85.chunk.js","sourcesContent":["import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport './SearchPanel.css';\r\n\r\nfunction SearchPanel(props) {\r\n    return(\r\n        <div className=\"searchContainer\">\r\n            <form className=\"searchForm\">\r\n                <p> Movie Title </p>\r\n                <Input className=\"textbox\" \r\n                    startAdornment={\r\n                        <InputAdornment position=\"start\">\r\n                          <SearchIcon />\r\n                        </InputAdornment>\r\n                      }\r\n                    placeholder=\"Enter movie title here\" \r\n                    type=\"text\" \r\n                    value={props.title} \r\n                    onChange={e => props.onChange(e.target.value)}\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPanel;","import React from 'react';\r\nimport './ResultsPanel.css';\r\n\r\nfunction ResultsPanel(props) {\r\n    let options = props.options;\r\n    let optionsLength = props.optionsLength;\r\n    let onNominate = props.onNominate.bind(this);\r\n    let hasStarted = props.search;\r\n    let tooManySelected = props.tooManySelected;\r\n\r\n    onNominate = (title, year) => {\r\n        props.onNominate(title, year);\r\n    }\r\n    \r\n    return(\r\n        <div className=\"panelContainer\">\r\n            {hasStarted && <h4> Results for \"{props.title}\" </h4>}     \r\n            {(hasStarted)\r\n                ? (<div>\r\n                    {(optionsLength > 0)\r\n                        ? \r\n                        (<div className=\"optionsList\">\r\n                            {tooManySelected && <p className=\"error\"> You may only select 5 films. </p>}\r\n                            <ul>\r\n                                {options.map((obj, idx) => \r\n                                    <div key={`${idx}`} >\r\n                                        <div className=\"movieEntry\">\r\n                                            <li> {obj.Title} ({obj.Year}) </li>\r\n                                            {props.films.some(film => (obj.Title === film.Title) && (obj.Year === film.Year))\r\n                                                ? (<button disabled={true} className=\"disable-submit\"> Nominate </button>) \r\n                                                : (<button disabled={false} className=\"allow-submit\" onClick={() => {onNominate(obj.Title, obj.Year)}}> Nominate </button>)\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </ul>\r\n                        </div>)\r\n                        : (<p className=\"error\"> No results found - try entering the full movie name, or check for spelling errors.</p>)}\r\n                </div>)\r\n                : ( (props.submitted)\r\n                        ? (<div><p className=\"success\"> Your nominations were submitted! </p></div>)\r\n                        : ((<div>\r\n                            <h4>Search Results</h4>\r\n                            <p className=\"info\"> You can nominate {5-props.films.length} more movies. </p>\r\n                        </div>))\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultsPanel;","import React from 'react';\r\nimport './Nominations.css';\r\n\r\nfunction Nominations(props) {\r\n\r\n    let films = props.films;\r\n    let finishOption = films.length === 5;\r\n    let onUndoNominate = props.onUndoNominate.bind(this);\r\n    let onFinalSubmit = props.onFinalSubmit.bind(this);\r\n         \r\n    return(\r\n        <div className=\"nominationsContainer\">\r\n            <div className=\"nominationsHeader\">\r\n                <h4> Nominations </h4>\r\n                <form onSubmit={(e) => onFinalSubmit(e)}>\r\n                    <button type=\"submit\" disabled={!finishOption} className={finishOption ? \"allow-submit\" : \"disable-submit\"}>Submit</button>\r\n                </form>  \r\n            </div>\r\n            <div>\r\n                {finishOption && <p className=\"info\">You can now submit your nominations.</p>}\r\n                <ul>\r\n                    {films.map((obj, idx) => {\r\n                        return(\r\n                            <div key={`${idx}`} className=\"movieEntry\">\r\n                                <li> {obj.Title} ({obj.Year}) </li>\r\n                                <button className=\"allow-submit\" onClick={() => onUndoNominate(obj.Title, obj.Year)} > Remove </button>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nominations;","import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport './Dashboard.css';\r\nimport SearchPanel from './SearchPanel';\r\nimport ResultsPanel from './ResultsPanel';\r\nimport Nominations from './Nominations';\r\n\r\nclass Dashboard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            films: [],\r\n            title: \"\",\r\n            search: false,\r\n            options: [],\r\n            submitted: false, \r\n            tooManySelected: false\r\n        };\r\n    }\r\n\r\n    /* Functions for the Search Panel */\r\n\r\n    searchHandleChange = (value) => {\r\n        this.setState({\r\n            title: value,\r\n            search: value.length !== 0,\r\n            submitted: false,\r\n            tooManySelected: false\r\n        }, () => \r\n            this.getSearchResults()\r\n        );\r\n    }\r\n\r\n    getSearchResults = () => {\r\n        if (this.state.search) {\r\n            axios.get(`https://www.omdbapi.com/?s=${this.state.title}&type=movie&apikey=799f7e71`)\r\n                .then(response => this.setOptions(response.data))\r\n                .catch(e => {console.log(e)});\r\n        } else {\r\n            this.setState({\r\n                options: []\r\n            })\r\n        }\r\n    }\r\n\r\n    setOptions = (data) => {\r\n        if (data.hasOwnProperty(\"Search\")) {\r\n            let currData = data[\"Search\"];\r\n            currData = currData.sort((a, b) => parseFloat(b.Year)-parseFloat(a.Year))\r\n            for (var obj in currData) {\r\n                for (var key in currData[obj]) {\r\n                    if (key !== \"Title\" && key !== \"Year\") {\r\n                        delete currData[obj][key];\r\n                    }\r\n                }\r\n            }\r\n            this.setState({\r\n                options: currData\r\n            })\r\n        } else {\r\n            this.setState({\r\n                options: []\r\n            })\r\n        }\r\n    }\r\n\r\n    /* Functions for the Results Panel */\r\n    handleNomination = (title, year) => {\r\n        if (this.state.films.length === 5) {\r\n            this.setState({\r\n                tooManySelected: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                films: this.state.films.concat({Title:title, Year:year}),\r\n            })\r\n        }\r\n    }\r\n\r\n    /* Functions for the Nominations Panel */\r\n    handleUndoNominate = (title, year) => {\r\n        this.setState({films: this.state.films.filter(function(obj) { \r\n            return ((obj.Title !== title) || (obj.Year !== year))  \r\n        })});\r\n        this.setState({\r\n            tooManySelected:false\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            films: [],\r\n            title: \"\",\r\n            search: false,\r\n            options: [],\r\n            submitted: true,\r\n            tooManySelected: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"main-container\">\r\n                <h1> The Shoppies </h1>\r\n                <div className=\"grid-container\">\r\n                    <SearchPanel \r\n                        title={this.state.submitted ? \"\" : this.state.title} \r\n                        onChange={this.searchHandleChange} \r\n                        submitted={this.state.submitted} \r\n                    />\r\n                    <ResultsPanel \r\n                        title={this.state.title} \r\n                        films={this.state.films} \r\n                        search={this.state.search} \r\n                        options={this.state.options ? this.state.options : []} \r\n                        optionsLength={this.state.options ? this.state.options.length : 0} \r\n                        onNominate={this.handleNomination} \r\n                        submitted={this.state.submitted}\r\n                        tooManySelected={this.state.tooManySelected}\r\n                    />\r\n                    <Nominations \r\n                        films={this.state.films} \r\n                        onUndoNominate={this.handleUndoNominate} \r\n                        onFinalSubmit={this.handleSubmit}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React, { Component } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}